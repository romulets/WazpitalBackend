package br.com.wazpital.dao;

import br.com.wazpital.domain.Hospital;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

import br.com.wazpital.domain.Address;
import br.com.wazpital.domain.Coordinate;
import br.com.wazpital.domain.HealthCare;
import br.com.wazpital.domain.Specialization;

public class HospitalDao extends AbstractDao {

	public void save(Hospital hospital) {
		PreparedStatement stmt;
		String sql;
		
		try {
			sql = "INSERT INTO Hospital "
					+ "(name, averageOverflowingLevel, averageAttendanceSpeed, averageAttendanceRate) "
					+ "VALUES (?, ?, ?, ?)";
			stmt = conn.prepareStatement(sql);
			stmt.setString(1, hospital.getName());
			stmt.setInt(2, hospital.getAverageOverflowingLevel());
			stmt.setInt(3, hospital.getAverageAttendanceSpeed());
			stmt.setInt(4, hospital.getAverageAttendanceRate());

			stmt.executeQuery();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void update(Hospital hospital) {
		PreparedStatement stmt;
		String sql;
		
		try {
			sql = "UPDATE Hospital SET name = ?, averageOverflowingLevel = ?, "
					+ "averageAttendanceSpeed = ?, averageAttendanceRate = ? WHERE id = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setString(1, hospital.getName());
			stmt.setInt(2, hospital.getAverageOverflowingLevel());
			stmt.setInt(3, hospital.getAverageAttendanceSpeed());
			stmt.setInt(4, hospital.getAverageAttendanceRate());
			stmt.executeQuery();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Hospital> findAll() {
		PreparedStatement stmt;
		ResultSet rs;
		List<Hospital> hospitals;
		String sql;
		
		hospitals = new ArrayList<Hospital>();
		
		try {
			sql = "SELECT * FROM Hospital";
			stmt = conn.prepareStatement(sql);
			rs = stmt.executeQuery();
			
			while (rs.next())
				hospitals.add(new Hospital(rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4)));
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return hospitals;
	}

	public Hospital findBy(int id) {
		PreparedStatement stmt;
		ResultSet rs;
		Hospital hospital;
		String sql;
		
		hospital = null;
		
		try {
			sql = "SELECT * FROM Hospital WHERE id = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, 1);
			rs = stmt.executeQuery();
			
			while (rs.next())
				hospital = new Hospital(rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4));
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return hospital;
	}

	public List<Hospital> findBy(Coordinate c) {
		PreparedStatement stmt;
		ResultSet rs;
		List<Hospital> hospitals;
		String sql;
		
		hospitals = new ArrayList<Hospital>();
		
		try {
			sql = "SELECT * FROM Hospital WHERE idCoordinate = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, 1);
			rs = stmt.executeQuery();
			
			while (rs.next())
				hospitals.add(new Hospital(rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4)));
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return hospitals;
	}

	public List<Hospital> findBy(Coordinate c, HealthCare h) {
		PreparedStatement stmt;
		ResultSet rs;
		List<Hospital> hospitals;
		String sql;
		
		hospitals = new ArrayList<Hospital>();
		
		try {
			sql = "SELECT * FROM Hospital WHERE idCoordinate = ? AND idHealhCare = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, 1);
			stmt.setInt(2, 2);
			rs = stmt.executeQuery();
			
			while (rs.next())
				hospitals.add(new Hospital(rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4)));
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return hospitals;
	}

	public List<Hospital> findBy(Coordinate c, Specialization s) {
		PreparedStatement stmt;
		ResultSet rs;
		List<Hospital> addresses;
		String sql;
		
		addresses = new ArrayList<Hospital>();
		
		try {
			sql = "SELECT * FROM Hospital WHERE idHospital = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, 1);
			rs = stmt.executeQuery();
			
			while (rs.next())
				addresses.add(new Hospital(rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4)));
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return addresses;
	}

	public List<Hospital> findBy(Coordinate c, Specialization s, HealthCare h) {
		PreparedStatement stmt;
		ResultSet rs;
		List<Hospital> addresses;
		String sql;
		
		addresses = new ArrayList<Hospital>();
		
		try {
			sql = "SELECT * FROM Hospital WHERE idHospital = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, 1);
			rs = stmt.executeQuery();
			
			while (rs.next())
				addresses.add(new Hospital(rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4)));
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return addresses;
	}

	public void delete(Hospital hospital) {
		PreparedStatement stmt;
		String sql;
		
		try {
			sql = "DELTE FROM Hospital WHERE id = ?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, 1);
			stmt.executeQuery();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected void openConnection() {
		MysqlDataSource dataSource = new MysqlDataSource();
		dataSource.setUser("wazuser");
		dataSource.setPassword("wazpass");
		dataSource.setServerName("wazDB");
		
		try {
			this.conn = dataSource.getConnection();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected void closeConnection() {
		try {
			this.conn.close();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
